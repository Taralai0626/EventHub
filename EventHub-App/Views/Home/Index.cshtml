@{
    ViewBag.Title = "Title";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head runat="server">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false" type="text/javascript"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDz_qxllhGeL9ZGB7kNBoXaOj0IVYNB1Sw&callback=initMap&libraries=places&v=weekly"
            defer></script>
    <script type="module" src="./index.js"></script>

    <link href="https://maps/documentation/javascript/examples/default.css" rel="stylesheet" />
    <title>EventHub</title>
    <script>

        //var objForMap = [];
        let map, infoWindow;
        var beaches = [];

        function initMap() {
            var outputLat = 43.6532260;
            var outputLon = -79.3831843;

            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 43.6631872, lng: -79.3811385 }, /*default location*/
                zoom: 13
            });
            setMarkers(map); /* to set markers */
        }
        
        /* default markers */
            /*var beaches = [
                ["Bondi Beach", -33.890542, 151.274856, 4],
                ["Coogee Beach", -33.923036, 151.259052, 5],
                ["Cronulla Beach", -34.028249, 151.157507, 3],
                ["Manly Beach", -33.80010128657071, 151.28747820854187, 2],
                ["Maroubra Beach", -33.950198, 151.259302, 1],
            ];*/

            

        function setMarkers(map) {
            // Adds markers to the map.
            // Marker sizes are expressed as a Size of X,Y where the origin of the image
            // (0,0) is located in the top left of the image.
            // Origins, anchor positions and coordinates of the marker increase in the X
            // direction to the right and in the Y direction down.
            var image = {
                url: "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png",
                // This marker is 20 pixels wide by 32 pixels high.
                size: new google.maps.Size(20, 32),
                // The origin for this image is (0, 0).
                origin: new google.maps.Point(0, 0),
                // The anchor for this image is the base of the flagpole at (0, 32).
                anchor: new google.maps.Point(0, 32),
            };
           

            /* one marker testing (IT'S WORKING) keep it for testing */
            /*var image =
                "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";
            var beachMarker = new google.maps.Marker({
                position: { lat: 43.663, lng: -79.381 },
                    
                map,
                icon: image,
            });*/
            
            /* for search bar and auto complete address function */
            var input = document.getElementById('searchInput');
            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                /*  If the place has a geometry, then present it on a map */
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);

                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';

                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);



               /* multiple markers (NOT WORKING) */
               /* var markers = [];
                var collisionBehavior = google.maps.CollisionBehavior.REQUIRED;
                var menuList = document.querySelector(".mdc-list");
                // Add the behaviors to the select options

                for (var _i = 0, _a = Object.entries(google.maps.CollisionBehavior); _i < _a.length; _i++) {
                    var _b = _a[_i], key = _b[0], value = _b[1];
                    var item = document.createElement("LI");
                    item.classList.add("mdc-list-item");
                    item.setAttribute("data-value", key);
                    var itemText = document.createElement("SPAN");
                    itemText.classList.add("mdc-list-item__text");
                    itemText.innerText = value;
                    item.appendChild(itemText);
                    menuList.appendChild(item);
                }

                var select = new mdc.select.MDCSelect(document.querySelector(".mdc-select"));
                select.listen("MDCSelect:change", function () {
                    collisionBehavior = select.value;
                    markers.forEach(function (marker) {
                        marker.set("collisionBehavior", collisionBehavior);
                    });
                });
                select.value = collisionBehavior;

                markers = [
                    [-122.3402, 47.6093],
                    [43.6532260, -79.3831843],
                   
                ].map(function (_a, i) {
                    var lng = _a[0], lat = _a[1];
                    return new google.maps.Marker({
                        position: new google.maps.LatLng({ lat: lat, lng: lng }),
                        map: map,
                        collisionBehavior: collisionBehavior,
                    });
                });
                */


                /* Location details */
                for (var i = 0; i < place.address_components.length; i++) {
                    if (place.address_components[i].types[0] == 'postal_code') {

                        document.getElementById('postal_code').innerHTML = place.address_components[i].long_name;

                    }
                    if (place.address_components[i].types[0] == 'country') {
                        document.getElementById('country').innerHTML = place.address_components[i].long_name;
                    }
                }

                //console.log(outputLat);

                document.getElementById('location').innerHTML = place.formatted_address;
                document.getElementById('lat').innerHTML = place.geometry.location.lat();
                document.getElementById('lon').innerHTML = place.geometry.location.lng();

                outputLat = place.geometry.location.lat();
                outputLon = place.geometry.location.lng();

                /*=====TICKETMASTER API===== */

                /*console.log(eventContainer); */
                var eventContainer = document.getElementById('eventContainer');

                $.ajax({
                    type: "GET",
                    url: "https://app.ticketmaster.com/discovery/v2/events?apikey=lgfgprr49bNDRJoqaBD62452TUPhbkEw&size=10&latlong=" + outputLat + "," + outputLon,
                    async: true,
                    dataType: "json",
                    success: function (json) {
                        eventContainer.innerHTML = '';
                        console.log(json);

                        var array1 = json._embedded.events;

                        //make each events as an individual object

                        array1.forEach((element) => {

                            //push element.name into array
                            var individualArray = [element.name, parseFloat(element._embedded.venues[0].location.latitude), parseFloat(element._embedded.venues[0].location.longitude)];
                           beaches.push(individualArray);
                            

                            //var beaches = objForMap;

                            //get lat and lon for map pins
                            console.log("each event lat is: " + element._embedded.venues[0].location.latitude+" and lon is: "+element._embedded.venues[0].location.longitude);


                            var node = document.createElement("li");
                            var eventDateContainer = document.createElement("p");
                            var eventStartTimeContainer = document.createElement("p");
                            var eventPriceMinContainer = document.createElement("p");
                            var eventPriceMaxContainer = document.createElement("p");
                            var eventPriceCurrencyContainer = document.createElement("p");
                            var eventUrlContainer = document.createElement("p");
                            var eventVenueContainer = document.createElement("p");
 
                            var eventName = document.createTextNode(element.name);
                            var eventDate = document.createTextNode(element.dates.start.localDate);
                            var eventStartTime = document.createTextNode(element.dates.start.localTime);
                            var eventPriceMin = document.createTextNode(element.priceRanges[0].min);
                            var eventPriceMax = document.createTextNode(element.priceRanges[0].max);
                            var eventPriceCurrency = document.createTextNode(element.priceRanges[0].currency);
                            var eventUrl = document.createTextNode(element.url);
                            var eventVenueAddress = document.createTextNode(element._embedded.venues[0].address.line1);
                            var eventVenueName = document.createTextNode(element._embedded.venues[0].name);

                           /****** create li  ******/
                            node.appendChild(eventName);


                            /****** create p  ******/
                            eventDateContainer.appendChild(eventDate);
                            eventStartTimeContainer.appendChild(eventStartTime);
                            eventPriceMinContainer.appendChild(eventPriceMin);
                            eventPriceMaxContainer.appendChild(eventPriceMax);
                            eventPriceCurrencyContainer.appendChild(eventPriceCurrency);
                            eventUrlContainer.appendChild(eventUrl);
                            eventVenueContainer.appendChild(eventVenueAddress);
                            eventVenueContainer.appendChild(eventVenueName);

                            /****** insert p to li ******/
                            node.appendChild(eventDateContainer);
                            node.appendChild(eventStartTimeContainer);
                            node.appendChild(eventPriceMinContainer);
                            node.appendChild(eventPriceMaxContainer);
                            node.appendChild(eventPriceCurrencyContainer);
                            node.appendChild(eventUrlContainer);
                            node.appendChild(eventVenueContainer);


                            /****** insert li to ul(eventContainer) ******/
                            eventContainer.appendChild(node);
                        });
                    },
                    error: function (xhr, status, err) {
                        /* This time, we do not end up here!*/
                    }
                });

                 // Shapes define the clickable region of the icon. The type defines an HTML
            // <area> element 'poly' which traces out a polygon as a series of X,Y points.
            // The final coordinate closes the poly by connecting to the first coordinate.
            var shape = {
                coords: [1, 1, 1, 20, 18, 20, 18, 1],
                type: "poly",
            };
            for (var i = 0; i < beaches.length; i++) {
                var beach = beaches[i];
                new google.maps.Marker({
                    position: { lat: beach[1], lng: beach[2] },
                    map: map,
                    icon: image,
                    shape: shape,
                    title: beach[0],
                    zIndex: beach[3],
                });
            }


            });

            /****** to get current location ******/
            var locationButton = document.createElement("button");

            locationButton.textContent = "Pan to Current Location";
            locationButton.classList.add("custom-map-control-button");
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
            locationButton.addEventListener("click", () => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            infowindow.setPosition(pos);
                            infowindow.setContent("Location found.");
                            infowindow.open(map);
                            map.setCenter(pos);
                            console.log(pos)
                        },
                        () => {
                            handleLocationError(true, infowindow, map.getCenter());
                        }
                    );
                } else {
                    handleLocationError(false, infowindow, map.getCenter());
                }
            });

        }
        console.log(beaches);

        function handleLocationError(browserHasGeolocation, infowindow, pos) {
            infowindow.setPosition(pos);
            infowindow.setContent(
                browserHasGeolocation
                    ? "Error: The Geolocation service failed."
                    : "Error: Your browser doesn't support geolocation."
            );
            infowindow.open(map);
        }
        window.initMap = initMap;

    </script>

</head>
<body>
    <div class="app">
        <div class="map-wrapper">
            <!-- Search input -->
            <div class="search-wrapper">
                <label class="address" for="address">Search Vanue:</label>
                <input id="searchInput" class="controls" type="text" placeholder="Enter a location">
            </div>
            <!-- Google map -->
            <div>
                <span id="map"></span>
            </div>

        </div>
        <!-- Display geolocation data -->
        <div>
            <ul class="geo-data">
                <li>Full Address: <span id="location"></span></li>
                <li>Postal Code: <span id="postal_code"></span></li>
                <li>Country: <span id="country"></span></li>
                <li>Latitude: <span id="lat"></span></li>
                <li>Longitude: <span id="lon"></span></li>
            </ul>
        </div>
    </div>

    <!--  <h1>Current Event</h1>
     <p id="location">location there</p>
     <h2>input your city and check out the list of suggested things!</h2>

     <form id="form1" runat="server" name="address" method="GET">

    <label for="address">Search Your City</label>
    <input id="txt_location" name="address" type="text" runat="server" />
    <input type="button" value="Search" onclick="getmap()" class="btn btn-secondary btn-lg" />
    <div id="map_populate" style="width:100%; height:500px; border: 5px solid #5E5454;"></div>
    </form>-->
    <!--TicketMaster data-->


    <div class="ticketmaster">
        <ul id="eventContainer">
            
        
        </ul>
    </div>


</body>
</html>

@section Styles
{
    <style type="text/css">
        #map {
            display: block;
            position: absolute;
            height: 60%;
            /*width: 100%;*/
            left: 2em;
            right: 2em;
        }

        #events {
            display: none;
        }
        /* * Optional: Makes the sample page fill the window */
        html, body {
            height: 100%;
            margin: 1em;
            padding: 1em;
        }


        /******** SEARCH BAR **********/

        .search-wrapper {
            text-align: center;
        }

        .address {
            font-size: 22px;
            font-weight: bolder;
        }

        #searchInput {
            position: relative !important;
            width: 16em;
            height: 2em;
            margin-bottom: 2em;
        }

        .container {
            height: 100%;
        }


        /*********** CURREN LOCATION BUTTON(google inner class) ***********/
        .custom-map-control-button {
            background-color: #fff;
            border: 0;
            border-radius: 2px;
            box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
            margin: 10px;
            padding: 0 0.5em;
            font: 400 18px Roboto, Arial, sans-serif;
            overflow: hidden;
            height: 40px;
            cursor: pointer;
        }


        .custom-map-control-button:hover {
            background: rgb(235, 235, 235);
        }


        .custom-map-control-button:hover {
            background: rgb(235, 235, 235);
        }


        .ticketmaster {
            margin-top: 500px;
        }
/*something*/
    </style>
}
